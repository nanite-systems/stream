version: '3.8'

services:
  # NSS base services
  collector-pc:
    image: ghcr.io/nanite-systems/stream-collector
    build:
      target: release-default
      args:
        APP_NAME: stream-collector
    restart: unless-stopped
    depends_on:
      - rabbitmq
    environment:
      LOG_PRETTY:
      RMQ_URLS: amqp://${RABBITMQ_DEFAULT_PASS:-guest}:${RABBITMQ_DEFAULT_USER:-guest}@rabbitmq:5672
      ESS_ENVIRONMENT: ps2
      ESS_SERVICE_IDS: $COLLECTORS_ESS_SERVICE_IDS

  collector-ps4eu:
    image: ghcr.io/nanite-systems/stream-collector
    build:
      target: release-default
      args:
        APP_NAME: stream-collector
    restart: unless-stopped
    depends_on:
      - rabbitmq
    environment:
      LOG_PRETTY:
      RMQ_URLS: amqp://${RABBITMQ_DEFAULT_PASS:-guest}:${RABBITMQ_DEFAULT_USER:-guest}@rabbitmq:5672
      ESS_ENVIRONMENT: ps2ps4eu
      ESS_SERVICE_IDS: $COLLECTORS_ESS_SERVICE_IDS

  collector-ps4us:
    image: ghcr.io/nanite-systems/stream-collector
    build:
      target: release-default
      args:
        APP_NAME: stream-collector
    restart: unless-stopped
    depends_on:
      - rabbitmq
    environment:
      LOG_PRETTY:
      RMQ_URLS: amqp://${RABBITMQ_DEFAULT_PASS:-guest}:${RABBITMQ_DEFAULT_USER:-guest}@rabbitmq:5672
      ESS_ENVIRONMENT: ps2ps4us
      ESS_SERVICE_IDS: $COLLECTORS_ESS_SERVICE_IDS

  api:
    image: ghcr.io/nanite-systems/stream-api
    build:
      target: release-default
      args:
        APP_NAME: stream-api
    restart: unless-stopped
    depends_on:
      - rabbitmq
    environment:
      LOG_PRETTY:
      RMQ_URLS: amqp://${RABBITMQ_DEFAULT_PASS:-guest}:${RABBITMQ_DEFAULT_USER:-guest}@rabbitmq:5672
      ESS_SERVICE_ID: $API_ESS_SERVICE_ID

  manifold:
    image: ghcr.io/nanite-systems/stream-manifold
    build:
      target: release-default
      args:
        APP_NAME: stream-manifold
    restart: unless-stopped
    depends_on:
      - rabbitmq
    labels:
      traefik.enable: true
      traefik.http.routers.nss.rule: Host(`nss.localhost`)
      traefik.http.routers.nss.middlewares: nss-auth@docker
      traefik.http.middlewares.nss-auth.forwardauth.address: http://auth:3000/auth
    environment:
      LOG_PRETTY:
      RMQ_URLS: amqp://${RABBITMQ_DEFAULT_PASS:-guest}:${RABBITMQ_DEFAULT_USER:-guest}@rabbitmq:5672

  # NSS support services
  auth:
    image: ghcr.io/nanite-systems/stream-auth
    build:
      target: release-default
      args:
        APP_NAME: stream-auth
    restart: unless-stopped
    environment:
      LOG_PRETTY:
      AUTH_SALT:
    profiles:
      - full
      - proxy

  # NSS 3rd party services
  rabbitmq:
    image: rabbitmq:3-management-alpine
    restart: unless-stopped
    hostname: rabbitmq
    #    ports:
    #      - '${RABBITMQ_PORT:-5672}:5672'
    #      - '${RABBITMQ_MANAGEMENT_PORT:-15672}:15672'
    labels:
      traefik.enable: true
      traefik.http.routers.rabbitmq.rule: Host(`${RABBITMQ_HOST:-rabbitmq.localhost}`)
      traefik.http.services.rabbitmq-ns-stream.loadbalancer.server.port: 15672

  # NSS reverse proxy
  traefik:
    image: traefik
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./.docker/traefik.yml:/traefik.yml
    ports:
      - '${TRAEFIK_API_PORT:-8080}:8080'
      - '${TRAEFIK_WEB_PORT:-80}:80'
    profiles:
      - full
      - proxy

  # NSS metric services
  prometheus:
    image: prom/prometheus
    restart: unless-stopped
    volumes:
      - ./.docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    profiles:
      - full
      - metrics

  grafana:
    image: grafana/grafana
    restart: unless-stopped
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      GF_SERVER_ROOT_URL: http://${GRAFANA_HOST:-grafana.localhost}
    labels:
      traefik.enable: true
      traefik.http.routers.grafana.rule: Host(`${GRAFANA_HOST:-grafana.localhost}`)
    profiles:
      - full
      - metrics

volumes:
  prometheus-data:
  grafana-data:
